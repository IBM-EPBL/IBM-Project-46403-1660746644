import numpy as np
import seaborn as sns 
import matplotlib.pyplot as plt
%matplotlib inline
from sklearn.preprocessing import LabelEncoder
load the data set
data=pd.read_csv("Churn_Modelling.csv")
data.head()
RowNumber	CustomerId	Surname	CreditScore	Geography	Gender	Age	Tenure	Balance	NumOfProducts	HasCrCard	IsActiveMember	EstimatedSalary	Exited
0	1	15634602	Hargrave	619	France	Female	42	2	0.00	1	1	1	101348.88	1
1	2	15647311	Hill	608	Spain	Female	41	1	83807.86	1	0	1	112542.58	0
2	3	15619304	Onio	502	France	Female	42	8	159660.80	3	1	0	113931.57	1
3	4	15701354	Boni	699	France	Female	39	1	0.00	2	0	0	93826.63	0
4	5	15737888	Mitchell	850	Spain	Female	43	2	125510.82	1	1	1	79084.10	0
data.tail()
RowNumber	CustomerId	Surname	CreditScore	Geography	Gender	Age	Tenure	Balance	NumOfProducts	HasCrCard	IsActiveMember	EstimatedSalary	Exited
9995	9996	15606229	Obijiaku	771	France	Male	39	5	0.00	2	1	0	96270.64	0
9996	9997	15569892	Johnstone	516	France	Male	35	10	57369.61	1	1	1	101699.77	0
9997	9998	15584532	Liu	709	France	Female	36	7	0.00	1	0	1	42085.58	1
9998	9999	15682355	Sabbatini	772	Germany	Male	42	3	75075.31	2	1	0	92888.52	1
9999	10000	15628319	Walker	792	France	Female	28	4	130142.79	1	1	0	38190.78	0
data.describe()
RowNumber	CustomerId	CreditScore	Age	Tenure	Balance	NumOfProducts	HasCrCard	IsActiveMember	EstimatedSalary	Exited
count	10000.00000	1.000000e+04	10000.000000	10000.000000	10000.000000	10000.000000	10000.000000	10000.00000	10000.000000	10000.000000	10000.000000
mean	5000.50000	1.569094e+07	650.528800	38.921800	5.012800	76485.889288	1.530200	0.70550	0.515100	100090.239881	0.203700
std	2886.89568	7.193619e+04	96.653299	10.487806	2.892174	62397.405202	0.581654	0.45584	0.499797	57510.492818	0.402769
min	1.00000	1.556570e+07	350.000000	18.000000	0.000000	0.000000	1.000000	0.00000	0.000000	11.580000	0.000000
25%	2500.75000	1.562853e+07	584.000000	32.000000	3.000000	0.000000	1.000000	0.00000	0.000000	51002.110000	0.000000
50%	5000.50000	1.569074e+07	652.000000	37.000000	5.000000	97198.540000	1.000000	1.00000	1.000000	100193.915000	0.000000
75%	7500.25000	1.575323e+07	718.000000	44.000000	7.000000	127644.240000	2.000000	1.00000	1.000000	149388.247500	0.000000
max	10000.00000	1.581569e+07	850.000000	92.000000	10.000000	250898.090000	4.000000	1.00000	1.000000	199992.480000	1.000000
Univariate Analysis
plt.boxplot(data['Age'])
{'whiskers': [,
  ],
 'caps': [,
  ],
 'boxes': [],
 'medians': [],
 'fliers': [],
 'means': []}

sns.displot(data['Age'])
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
 in 
----> 1 sns.displot(data['Age'])

AttributeError: module 'seaborn' has no attribute 'displot'
plt.figure(figsize=(5,5))
sns.countplot(x='HasCrCard',data=data)
plt.xlabel('0:Customer with credit card,1:Customer without credit card')
plt.ylabel('count')
plt.title('Bank Customer Churn Visualizarion')
plt.show()

sns.countplot(x='IsActiveMember',data=data)
plt.xlabel('0:Active Customers,1:Inactive Customers')
plt.ylabel('count')
plt.title('Bank Customers Churn Visualization')
plt.show()

data[['Gender','Age','Tenure','Balance','EstimatedSalary','Surname']].corr()
Age	Tenure	Balance	EstimatedSalary
Age	1.000000	-0.009997	0.028308	-0.007201
Tenure	-0.009997	1.000000	-0.012254	0.007784
Balance	0.028308	-0.012254	1.000000	0.012797
EstimatedSalary	-0.007201	0.007784	0.012797	1.000000
Bivariate Analysis
sns.scatterplot(x=data.Age,y=data.Tenure)
plt.ylim(-1,10)
(-1, 10)

Multivariate Analysis
sns.pairplot(data=data[['NumOfProducts','Tenure']])

Deccriptive Statistics
data.info()
RangeIndex: 10000 entries, 0 to 9999
Data columns (total 14 columns):
RowNumber          10000 non-null int64
CustomerId         10000 non-null int64
Surname            10000 non-null object
CreditScore        10000 non-null int64
Geography          10000 non-null object
Gender             10000 non-null object
Age                10000 non-null int64
Tenure             10000 non-null int64
Balance            10000 non-null float64
NumOfProducts      10000 non-null int64
HasCrCard          10000 non-null int64
IsActiveMember     10000 non-null int64
EstimatedSalary    10000 non-null float64
Exited             10000 non-null int64
dtypes: float64(2), int64(9), object(3)
memory usage: 976.6+ KB
data.dtypes
RowNumber            int64
CustomerId           int64
Surname             object
CreditScore          int64
Geography           object
Gender              object
Age                  int64
Tenure               int64
Balance            float64
NumOfProducts        int64
HasCrCard            int64
IsActiveMember       int64
EstimatedSalary    float64
Exited               int64
dtype: object
data.describe
data.shape
(10000, 14)
Handling of missing values
data.isna().any()
RowNumber          False
CustomerId         False
Surname            False
CreditScore        False
Geography          False
Gender             False
Age                False
Tenure             False
Balance            False
NumOfProducts      False
HasCrCard          False
IsActiveMember     False
EstimatedSalary    False
Exited             False
dtype: bool
Find Outliers and Replace Outliers
def box_scatter(df,x,y):
    fig,(ax1,ax2) = plt.subplots(nrows=2, ncols=1, figsize=(16,6))
    sns.boxplot(data=df,x=x,ax=ax1)
    sns.scatterplot(data=df,x=x,y=y,ax=ax2)
    
box_scatter(data,'CreditScore','Exited');
plt.tight_layout()
print(f"# of Bivariate Outliers: {len(data.loc[data['CreditScore'] < 400])}")
# of Bivariate Outliers: 19

box_scatter(data,'Age','Exited');
plt.tight_layout()
print(f"# of Bivariate Outliers: {len(data.loc[data['Age']>87])}")
# of Bivariate Outliers: 3

box_scatter(data,'Balance','Exited');
plt.tight_layout()
print(f"# of Bivariate Outliers: {len(data.loc[data['Balance']>220000])}")
# of Bivariate Outliers: 4

box_scatter(data,'EstimatedSalary','Exited');
plt.tight_layout()

for i in data:
    if data[i].dtype=='int64' or data[i].dtypes=='float64':
        q1=data[i].quantile(0.25)
        q3=data[i].quantile(0.75)
        iqr=q3 - q1 
        upper=q3 + 1.5 * iqr 
        lower=q1 - 1.5 * iqr 
        data[i] = np.where(data[i]>upper,upper,data[i])
        data[i] = np.where(data[i]<lower,lower,data[i])
box_scatter(data,'CreditScore','Exited');
plt.tight_layout()
print(f"# of Bivariate Outliers: {len(data.loc[data['CreditScore']<400])}")
# of Bivariate Outliers: 19

box_scatter(data,'Age','Exited');
plt.tight_layout()
print(f"# of Bivariate Outliers: {len(data.loc[data['Age']>87])}")
# of Bivariate Outliers: 0

box_scatter(data,'Balance','Exited');
plt.tight_layout()
print(f"# of Bivariate Outliers: {len(data.loc[data['Balance']>220000])}")
# of Bivariate Outliers: 4

Categorical cloumns and perform Encoding
le= LabelEncoder()
data['Surname'] = le.fit_transform(data['Surname'])
data.head()
RowNumber	CustomerId	Surname	CreditScore	Geography	Gender	Age	Tenure	Balance	NumOfProducts	HasCrCard	IsActiveMember	EstimatedSalary	Exited
0	1.0	15634602.0	1115	619.0	France	Female	42.0	2.0	0.00	1.0	1.0	1.0	101348.88	0.0
1	2.0	15647311.0	1177	608.0	Spain	Female	41.0	1.0	83807.86	1.0	0.0	1.0	112542.58	0.0
2	3.0	15619304.0	2040	502.0	France	Female	42.0	8.0	159660.80	3.0	1.0	0.0	113931.57	0.0
3	4.0	15701354.0	289	699.0	France	Female	39.0	1.0	0.00	2.0	0.0	0.0	93826.63	0.0
4	5.0	15737888.0	1822	850.0	Spain	Female	43.0	2.0	125510.82	1.0	1.0	1.0	79084.10	0.0
spliting of data into dependent and independent variables
